<?php

use Swilen\Http\Common\Http;
use Swilen\Http\Exception\FileNotFoundException;
use Swilen\Http\Request;
use Swilen\Http\Response;
use Swilen\Http\Response\BinaryFileResponse;
use Swilen\Http\Response\JsonResponse;

uses()->group('Http', 'Response');

it('Espect \Response instance created succesfully and is instance of \Swilen\Http\Response', function () {
    $response = new Response();
    expect($response)->toBeObject();
    expect($response)->toBeInstanceOf(Response::class);
    expect($response->statusCode())->toBe(Http::OK);
    expect($response->getContent())->toBeNull();
});

/*
 * Testing binary file response
 */
it('Get the content of the Buffer file generated by the BinaryFileResponse instance', function () {
    ob_start();

    $response = (new BinaryFileResponse(__DIR__.'/fixtures/testing.md'))->prepare(Request::make(''))->terminate();

    expect(trim(ob_get_clean()))->toBe('Testing Markdown');
    expect($response->headers->get('Content-Type'))->toBeIn([
        'text/markdown', 'application/octet-stream',
    ]);
    expect($response->statusCode())->toBe(Http::OK);
});

it('Raise error when BinaryFileResponse instance contains a file path that does not exist', function () {
    expect(new BinaryFileResponse(__DIR__.'/fixtures/nothing.md'))->toBeResource();
})->throws(FileNotFoundException::class);

/*
 * Testing json, array response
 */
it('Expect JsonResponse() send content as json', function () {
    ob_start();

    $response = (new JsonResponse(['hello' => 'World']))->prepare(Request::make(''))->terminate();

    expect(trim(ob_get_clean()))->toBeJson();
    expect($response->headers->get('Content-Type'))->toBeGreaterThanOrEqual('application/json');
    expect($response->statusCode())->toBe(Http::OK);
    expect($response->getContent())->toBeJson();
});

it('Expect factory get json prevent encoding', function () {
    $response = new Response(['test' => 'swilen'], Http::NO_CONTENT);
    $prepared = $response->prepare(Request::make('/'));

    expect($prepared->getContent())->toBeNull();
    expect($prepared->statusCode())->toBe(Http::NO_CONTENT);
});

it('Insert header succesfully', function () {
    $response = (new Response(''))->withHeader('Fo', 'bar');

    expect($response->headers->get('Fo'))->toBe('bar');
});
