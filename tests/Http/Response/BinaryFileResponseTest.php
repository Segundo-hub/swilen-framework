<?php

use Swilen\Http\Common\Http;
use Swilen\Http\Component\File\File;
use Swilen\Http\Component\ResponseHeaderHunt;
use Swilen\Http\Exception\FileException;
use Swilen\Http\Exception\FileNotFoundException;
use Swilen\Http\Request;
use Swilen\Http\Response\BinaryFileResponse;

uses()->group('Http', 'Response');

afterEach(function () {
    Mockery::close();
});

it('Get the content of the Buffer file generated by the BinaryFileResponse instance', function () {
    /** @var BinaryFileResponse $response */
    list($response, $content) = getBuffer(function () {
        return (new BinaryFileResponse(__DIR__.'/../__fixtures__/testing.md'))->prepare(Request::make(''))->terminate();
    });

    expect($response->headers->get('Content-Type'))->toMatch('/text\/markdown+/');

    expect($response->getStatusCode())->toBe(Http::OK);
    expect($content)->toBe('Testing Markdown');
    expect($response->getFile())->toBeTruthy();
    expect($response->getFile())->toBeInstanceOf(File::class);
});

it('Raise error when BinaryFileResponse instance contains a file path that does not exist', function () {
    expect(new BinaryFileResponse(__DIR__.'/../__fixtures__/nothing.md'))->toBeResource();
})->throws(FileNotFoundException::class);

it('BinaryFileResponse as attachment file', function () {
    $response = new BinaryFileResponse(getReadableFileStub(), 200, [], ResponseHeaderHunt::DISPOSITION_ATTACHMENT);

    expect($response->hasHeader('Content-Disposition'))->toBeTrue();

	$response->updateFilename('test-foo.txt');
	expect($response->headers->get('Content-Disposition'))->toBe('attachment; filename="test-foo.txt"');
});

it('Correct file instance resolve', function () {
    $response = new BinaryFileResponse(getReadableFileStub());
    expect($response->getFile())->toBeInstanceOf(File::class);

    $file     = new SplFileStub(getReadableFileStub());
    $response = new BinaryFileResponse($file);
    expect($response->getFile())->toBeInstanceOf(File::class);

    $file     = new File(getReadableFileStub());
    $response = new BinaryFileResponse($file);
    expect($response->getFile())->toBeInstanceOf(File::class);
});

it('File is not readable', function () {
    /**
     * @var \Mockery\MockInterface $file
     */
    $file = Mockery::mock(File::class, [getReadableFileStub()]);
    $file->shouldReceive('isReadable')->with()->andReturn(false);

    new BinaryFileResponse($file);
})->throws(FileException::class, 'File must be readable.');

class SplFileStub extends SplFileInfo
{
}
